% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zzz-step-vpd-nl.R
\name{step_vpd_nl}
\alias{step_vpd_nl}
\alias{tidy.step_vpd_nl}
\title{Normalized Life Curve Vectorization of Persistent Homology}
\usage{
step_vpd_nl(
  recipe,
  ...,
  role = "predictor",
  trained = FALSE,
  hom_degree = 0L,
  xseq = NULL,
  xmin = NULL,
  xmax = NULL,
  xlen = NULL,
  xby = NULL,
  columns = NULL,
  keep_original_cols = TRUE,
  skip = FALSE,
  id = rand_id("vpd_nl")
)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the
sequence of operations for this recipe.}

\item{...}{One or more selector functions to choose variables
for this step. See \code{\link[recipes:selections]{selections()}} for more details.}

\item{role}{For model terms created by this step, what analysis role should
they be assigned? By default, the new columns created by this step from
the original variables will be used as \emph{predictors} in a model.}

\item{trained}{A logical to indicate if the quantities for
preprocessing have been estimated.}

\item{hom_degree}{The homological degree of the features to be transformed.}

\item{xseq}{A discretization grid, as an increasing numeric vector.
\code{xseq} overrides the other \verb{x*} parameters with a warning.}

\item{xmin, xmax, xlen, xby}{Limits and resolution of a discretization grid;
specify only one of \code{xlen} and \code{xby}.}

\item{columns}{A character string of the selected variable names. This field
is a placeholder and will be populated once \code{\link[recipes:prep]{prep()}} is used.}

\item{keep_original_cols}{A logical to keep the original variables in the
output. Defaults to \code{FALSE}.}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by \code{\link[recipes:bake]{bake()}}? While all operations are baked
when \code{\link[recipes:prep]{prep()}} is run, some operations may not be able to be
conducted on new data (e.g. processing the outcome variable(s)).
Care should be taken when using \code{skip = TRUE} as it may affect
the computations for subsequent operations.}

\item{id}{A character string that is unique to this step to identify it.}
}
\value{
An updated version of \code{recipe} with the new step added to the
sequence of any existing operations.
}
\description{
The function \code{step_vpd_nl()} creates
a \emph{specification} of a recipe step that will convert
a list-column of 3-column matrices of persistence data
to a list-column of 1-row matrices of vectorizations.
}
\details{
Persistent homology is usually encoded as birth--death pairs (barcodes or
diagrams), but the space of persistence data sets does not satisfy convenient
statistical properties. Such applications as hypothesis testing and machine
learning benefit from transformations of persistence data, often to Hilbert
spaces (vector spaces with inner products and induced metrics).
}
\section{Engine}{


The normalized life curve vectorization deploys
\code{\link[TDAvec:computeNL]{TDAvec::computeNL()}}.
See there for definitions and references.
}

\section{Tuning Parameters}{


This step has 1 tuning parameter:
\itemize{
\item \code{hom_degree}: Homological degree (type: integer, default: \code{0L})
}
}

\examples{
# toy data set
klein_sampler <- function(n, prob = .5) {
  if (rbinom(1, 1, prob) == 0) {
    tdaunif::sample_klein_flat(n)
  } else {
    tdaunif::sample_klein_tube(n)
  }
}
phom_data <- data.frame(
  id = LETTERS[seq(6L)],
  phom = I(lapply(
    replicate(6L, klein_sampler(60), simplify = FALSE),
    \(d) as.data.frame(ripserr::vietoris_rips(d))
  )),
  part = rep(c("train", "test"), each = 3)
)
print(phom_data)
head(phom_data$phom[[1]])

phom_train <- filter(phom_data, part == "train")
phom_test <- filter(phom_data, part == "test")

# choose maximum filtration parameters
max_death <- phom_train$phom |> 
  lapply(\(d) d$death) |> 
  unlist() |> max()
max_persistence <- phom_train$phom |> 
  lapply(\(d) d$death - d$birth) |> 
  unlist() |> max()

# build preprocessing recipe with custom settings
phom_train \%>\%
  recipe() \%>\%
  update_role(id, new_role = "id") \%>\%
  step_vpd_nl(phom, hom_degree = 1) \%>\%
  print() -> phom_rec
# tidy the prepped recipe step
tidy(phom_rec, number = 1)

# prepare recipe with training data
phom_rec \%>\%
  prep(training = phom_train, strings_as_factors = FALSE) \%>\%
  print() -> phom_prep
print(phom_prep)
# tidy the prepped recipe step
tidy(phom_prep, number = 1)

# preprocess training data
juice(phom_prep)

# preprocess testing data
bake(phom_test, object = phom_prep)

# two-step recipe from sample to vectorization
sample_data <- data.frame(
  id = LETTERS[seq(6L)],
  sample = I(c(replicate(6L, klein_sampler(60), simplify = FALSE))),
  part = rep(c("train", "test"), each = 3L)
)
sample_train <- filter(sample_data, part == "train")
sample_test <- filter(sample_data, part == "test")

# build preprocessing recipe with default settings
sample_train \%>\%
  recipe() \%>\%
  update_role(id, new_role = "id") \%>\%
  step_phom_point_cloud(sample, engine = "ripserr") \%>\%
  step_vpd_nl(sample_phom, keep_original_cols = FALSE) \%>\%
  prep(training = sample_train, strings_as_factors = FALSE) ->
  sample_rec
print(sample_rec)

# preprocess training data
juice(sample_rec)

# preprocess testing data
bake(sample_test, object = sample_rec)
}
