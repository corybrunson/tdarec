% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/step-PHom.R
\name{step_phom}
\alias{step_phom}
\title{Topological feature extraction via persistent homology}
\usage{
step_phom(
  recipe,
  ...,
  role = "predictor",
  trained = FALSE,
  engine = "ripserr",
  method = "vietoris_rips",
  dim_max = 1L,
  radius_max = NULL,
  diameter_max = NULL,
  field_order = 2L,
  cubical_method = "lj",
  columns = NULL,
  keep_original_cols = TRUE,
  skip = FALSE,
  id = rand_id("phom")
)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the
sequence of operations for this recipe.}

\item{...}{One or more selector functions to choose variables
for this step. See \code{\link[recipes:selections]{selections()}} for more details.}

\item{role}{For model terms created by this step, what analysis role should
they be assigned? By default, the new columns created by this step from
the original variables will be used as \emph{predictors} in a model.}

\item{trained}{A logical to indicate if the quantities for
preprocessing have been estimated.}

\item{engine}{Character; package to use to calculate persistent homology.}

\item{method}{Character; type of filtration to construct (must be compatible
with data).}

\item{dim_max, radius_max, diameter_max, field_order, cubical_method}{Parameters
passed to persistence engines.}

\item{columns}{A character string of the selected variable names. This field
is a placeholder and will be populated once \code{\link[recipes:prep]{prep()}} is used.}

\item{keep_original_cols}{A logical to keep the original variables in the
output. Defaults to \code{FALSE}.}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by \code{\link[recipes:bake]{bake()}}? While all operations are baked
when \code{\link[recipes:prep]{prep()}} is run, some operations may not be able to be
conducted on new data (e.g. processing the outcome variable(s)).
Care should be taken when using \code{skip = TRUE} as it may affect
the computations for subsequent operations.}

\item{id}{A character string that is unique to this step to identify it.}
}
\value{
An updated version of \code{recipe} with the new step added to the
sequence of any existing operations.
}
\description{
The function \code{step_phom()} creates a \emph{specification} of a recipe
step that will convert compatible data formats (distance matrices,
coordinate matrices, or time series) to 3-column matrix representations of
persistence diagram data.
}
\details{
(PH)

(Guidelines / good practice?)

(Describe arguments in detail.)
}
\examples{
# toy data set
klein_sampler <- function(n, prob = .5) {
  if (rbinom(1, 1, prob) == 0) {
    tdaunif::sample_klein_flat(n)
  } else {
    tdaunif::sample_klein_tube(n)
  }
}
sample_data <- data.frame(
  id = LETTERS[seq(6L)],
  sample = I(c(replicate(6L, klein_sampler(60), simplify = FALSE))),
  part = rep(c("train", "test"), each = 3L)
)
print(sample_data)
head(sample_data$sample[[1]])

sample_train <- filter(sample_data, part == "train")
sample_test <- filter(sample_data, part == "test")

# build preprocessing recipe with default settings
sample_train \%>\%
  recipe() \%>\%
  update_role(id, new_role = "id") \%>\%
  step_phom(sample) \%>\%
  prep(training = sample_train, strings_as_factors = FALSE) ->
  sample_rec
print(sample_rec)

# preprocess training data
juice(sample_rec)

# preprocess testing data
bake(sample_test, object = sample_rec)

}
